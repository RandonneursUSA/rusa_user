<?php

/**
 * @file
 * Contains rusa_user.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\user\UserInterface;
use Drupal\user\Entity\User;
use Drupal\rusa_api\RusaMembers;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function rusa_user_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the rusa_imports module.
    case 'help.page.rusa_imports':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Create Drupal accounts for RUSA members.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_update()
 *
 * Auto fill the user dispaly name with first + last
 *
 */
function rusa_user_entity_presave(EntityInterface $entity) {

  if ($entity instanceof UserInterface) {
    $fields = $entity->getFields(FALSE);
    if ($fields['field_display_name']->isEmpty()) {
      $fname = $fields['field_first_name']->getValue();
      $lname = $fields['field_last_name']->getValue();
      $display_name = $fname[0]['value'] . ' ' . $lname[0]['value'];
      $fields['field_display_name']->setValue([$display_name]);
    }
  }

}


/* 
 * Implements hook_form_FORM_ID_alter
 *
 * Add a custom login validation to check for expired RUSA membership
 */
function rusa_user_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
    $form['#validate'][]  = '_rusa_user_user_login_form_validate';
}

/**
 * Implements hook_user_login
 *
 * Sync user data at login
 *
 */
function rusa_user_user_login($account) { 
    // Sync member data from GDBM
    \Drupal::service('rusa_user.manager')->syncMemberData($account->id());
}

/*
 * Do the validation here.
 * Note: maybe move this into a MemberValidate class later
 *
 */
function _rusa_user_user_login_form_validate(&$form, FormStateInterface $form_state) {
    $name = $form_state->getValue('name');
    $account = user_load_by_name($name); 
 
    if (!empty($account)) {

        // Get member id from account
        $mid = $account->get("field_rusa_member_id")->getString();

        // Get member data from the RUSa database
        $memobj  = new RusaMembers(['key' => 'mid', 'val' => $mid]);

        // If membersip is expired set an error on the login form
        if ($memobj->isExpired($mid)) {
            // Temporary disble membership requirement for the first week of the year
            // Maybe add a date check here next year, but for now just modify the code
            $mdata = $memobj->getMember($mid);
            $expdate = $mdata->expdate;
            \Drupal::Messenger()->addWarning(t('Your RUSA membership expired on %exp. Please renew your membership.', ['%exp' => $expdate]));
            
            /*            
            $form_state->setErrorByName('name', t('Your RUSA membership is expired. Please renew your membership on the ' .
                Link::createFromRoute('membership page', 'rusa.membership')
                ->toString()
                ->getGeneratedLink()));
            */
        }
        // Check to see if membership will expire soon
        else {
            $mdata = $memobj->getMember($mid);
            $expdate = $mdata->expdate;
            if (strtotime($expdate) < strtotime("+2 month") ) {
                \Drupal::Messenger()->addWarning(t('Your RUSA membership will expire on %exp', ['%exp' => $expdate]));
            }
        }
       
    }
}


/**
 * hook_mail
 *
 * Provides the template for email notifications
 *
 */
function rusa_user_mail($key, &$message, $params) {

    // Will figure out how to use and replace tokens in messages
    $token_service = \Drupal::token();

    $body  = $params['message'] . "\n\n" . $params['url'] ;
    $message['subject'] = $params['subj'];
    $message['body'][]  = Drupal\Core\Mail\MailFormatHelper::htmlToText($body);
}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * Point to our menu plugin to change the log in link text
 */
function rusa_user_menu_links_discovered_alter(&$links) {
    $links['user.logout']['class'] = 'Drupal\rusa_user\Plugin\Menu\RusaAccountMenu';
}


/**
 * Implements hook_cron
 *
 * Update users email from members database
 */
function rusa_user_cron() {
     \Drupal::service('rusa_user.manager')->syncMemberData();
}


